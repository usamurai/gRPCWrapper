syntax = "proto3";

package rfcontrol;

service RFController {
    rpc setRFSettings (RFRequest) returns (RFResponse);
    rpc getDeviceStatus (DeviceRequest) returns (DeviceStatusResponse);
    rpc getPPString (DeviceRequest) returns (PPStringResponse);
    rpc getGainRange (DeviceRequest) returns (RangeResponse);
    rpc getFrequencyRange (DeviceRequest) returns (RangeResponse);

    rpc Greet(GreetingRequest) returns (GreetingResponse );
    rpc Chat(stream GreetingRequest) returns (stream GreetingResponse);

    rpc SendFFTCoefficients (FFTCoefficientsRequest) returns (FFTCoefficientsResponse);
    rpc StreamFFTCoefficients (stream FFTCoefficientsStreamRequest) returns (stream FFTCoefficientsStreamResponse);

    // Bidirectional streaming RPC for sending and receiving large data
    rpc TransferData (stream DataChunk) returns (stream DataChunk) {}
}

// Message to hold data chunks
message DataChunk {
  bytes data = 1;
  int32 chunk_id = 2;
  bool is_last = 3;
}

message FFTCoefficientsRequest {
  repeated double real = 1;
  repeated double imag = 2;
}

message FFTCoefficientsResponse {
  string status = 1;
}

message FFTCoefficientsStreamRequest {
  repeated double real = 1;
  repeated double imag = 2;
  int32 chunk_id = 3;
  bool is_last_chunk = 4;
}

message FFTCoefficientsStreamResponse {
  string status = 1;
  int32 chunk_id = 2;
}

message RFRequest {
    string device_id = 1;
    double frequency = 2;
    double gain = 3;
}

message RFResponse {
    bool success = 1;
    string message = 2;
}

message DeviceRequest {
    string device_id = 1;
}

message DeviceStatusResponse {
    string device_id = 1;
    double frequency = 2;
    double gain = 3;
    bool ref_locked = 4;
    bool lo_locked = 5;
}

message RangeResponse {
    double min_value = 1;
    double max_value = 2;
}

message PPStringResponse {
    string pp_string = 1;
}

message GreetingRequest {
    string name = 1;
}

message GreetingResponse {
    string greeting = 1;
}
