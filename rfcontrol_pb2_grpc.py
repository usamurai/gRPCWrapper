# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rfcontrol_pb2 as rfcontrol__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rfcontrol_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RFControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setRFSettings = channel.unary_unary(
                '/rfcontrol.RFController/setRFSettings',
                request_serializer=rfcontrol__pb2.RFRequest.SerializeToString,
                response_deserializer=rfcontrol__pb2.RFResponse.FromString,
                _registered_method=True)
        self.getDeviceStatus = channel.unary_unary(
                '/rfcontrol.RFController/getDeviceStatus',
                request_serializer=rfcontrol__pb2.DeviceRequest.SerializeToString,
                response_deserializer=rfcontrol__pb2.DeviceStatusResponse.FromString,
                _registered_method=True)
        self.getPPString = channel.unary_unary(
                '/rfcontrol.RFController/getPPString',
                request_serializer=rfcontrol__pb2.DeviceRequest.SerializeToString,
                response_deserializer=rfcontrol__pb2.PPStringResponse.FromString,
                _registered_method=True)
        self.getGainRange = channel.unary_unary(
                '/rfcontrol.RFController/getGainRange',
                request_serializer=rfcontrol__pb2.DeviceRequest.SerializeToString,
                response_deserializer=rfcontrol__pb2.RangeResponse.FromString,
                _registered_method=True)
        self.getFrequencyRange = channel.unary_unary(
                '/rfcontrol.RFController/getFrequencyRange',
                request_serializer=rfcontrol__pb2.DeviceRequest.SerializeToString,
                response_deserializer=rfcontrol__pb2.RangeResponse.FromString,
                _registered_method=True)


class RFControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def setRFSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPPString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGainRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFrequencyRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RFControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setRFSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.setRFSettings,
                    request_deserializer=rfcontrol__pb2.RFRequest.FromString,
                    response_serializer=rfcontrol__pb2.RFResponse.SerializeToString,
            ),
            'getDeviceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceStatus,
                    request_deserializer=rfcontrol__pb2.DeviceRequest.FromString,
                    response_serializer=rfcontrol__pb2.DeviceStatusResponse.SerializeToString,
            ),
            'getPPString': grpc.unary_unary_rpc_method_handler(
                    servicer.getPPString,
                    request_deserializer=rfcontrol__pb2.DeviceRequest.FromString,
                    response_serializer=rfcontrol__pb2.PPStringResponse.SerializeToString,
            ),
            'getGainRange': grpc.unary_unary_rpc_method_handler(
                    servicer.getGainRange,
                    request_deserializer=rfcontrol__pb2.DeviceRequest.FromString,
                    response_serializer=rfcontrol__pb2.RangeResponse.SerializeToString,
            ),
            'getFrequencyRange': grpc.unary_unary_rpc_method_handler(
                    servicer.getFrequencyRange,
                    request_deserializer=rfcontrol__pb2.DeviceRequest.FromString,
                    response_serializer=rfcontrol__pb2.RangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rfcontrol.RFController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rfcontrol.RFController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RFController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def setRFSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfcontrol.RFController/setRFSettings',
            rfcontrol__pb2.RFRequest.SerializeToString,
            rfcontrol__pb2.RFResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDeviceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfcontrol.RFController/getDeviceStatus',
            rfcontrol__pb2.DeviceRequest.SerializeToString,
            rfcontrol__pb2.DeviceStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPPString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfcontrol.RFController/getPPString',
            rfcontrol__pb2.DeviceRequest.SerializeToString,
            rfcontrol__pb2.PPStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGainRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfcontrol.RFController/getGainRange',
            rfcontrol__pb2.DeviceRequest.SerializeToString,
            rfcontrol__pb2.RangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFrequencyRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfcontrol.RFController/getFrequencyRange',
            rfcontrol__pb2.DeviceRequest.SerializeToString,
            rfcontrol__pb2.RangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
